@model LMS.Models.UserDetail
@{
   if (!this.Request.Url.Query.Contains("Layout"))
   {
      Layout = null;
   }
   if (Session["UserId"] == null)
   {
      Response.Redirect("~/Login/Index");
   }
}
@if (this.Request.Url.Query.Contains("Layout"))
{
<center>
   <h2>Update Profile</h2>
</center>
}
@using (Html.BeginForm("InsertUpdateOrDelete", "User", FormMethod.Post, new { onsubmit = "return SubmitForm(this)" }))
{
@*@Html.AntiForgeryToken()*@
   <div class="row m-2">
      @Html.HiddenFor(model => model.UserId)
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.Gender, new { @class = "control-label" })
         @Html.DropDownListFor(model => model.Gender, LMS.Utilities.DropdownListHelper.DDLForGender(), "Select Gender", new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.Gender)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.FirstName, new { @class = "control-label" })
         @Html.EditorFor(model => model.FirstName, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.FirstName)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.MiddleName, new { @class = "control-label" })
         @Html.EditorFor(model => model.MiddleName, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.MiddleName)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.LastName, new { @class = "control-label" })
         @Html.EditorFor(model => model.LastName, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.LastName)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.UserName, new { @class = "control-label" })
         @Html.EditorFor(model => model.UserName, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.UserName)
      </div>
      <div class="form-group col-lg-6 col-md-12">
         @Html.LabelFor(model => model.Email, new { @class = "control-label" })
         @Html.EditorFor(model => model.Email, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.Email)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.RoleId, new { @class = "control-label" })
         @Html.DropDownListFor(model => model.RoleId, LMS.Utilities.DropdownListHelper.DDLForRoleMaster(), "Select Role", new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.RoleId)
      </div>
      <div class="form-group col-lg-6 col-md-12">
         @Html.LabelFor(model => model.Address1, new { @class = "control-label" })
         @Html.EditorFor(model => model.Address1, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.Address1)
      </div>
      <div class="form-group col-lg-6 col-md-12">
         @Html.LabelFor(model => model.Address2, new { @class = "control-label" })
         @Html.EditorFor(model => model.Address2, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.Address2)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.City, new { @class = "control-label" })
         @Html.EditorFor(model => model.City, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.City)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.State, new { @class = "control-label" })
         @Html.DropDownListFor(model => model.State, LMS.Utilities.DropdownListHelper.DDLForState(), "Select State", new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.State)
      </div>
      <div class="form-group col-lg-3 col-md-6" disabled>
         @Html.LabelFor(model => model.Country, new { @class = "control-label" })
         @Html.EditorFor(model => model.Country, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.Country)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.Pincode, new { @class = "control-label" })
         @Html.EditorFor(model => model.Pincode, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.Pincode)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.DateOfBirth, new { @class = "control-label" })
         @Html.EditorFor(model => model.DateOfBirth, new { @class = "form-control", @type = "date" })
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.DateOfJoin, new { @class = "control-label" })
         @Html.EditorFor(model => model.DateOfJoin, new { @class = "form-control", @type = "date" })
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.MobileNo, new { @class = "control-label" })
         @Html.EditorFor(model => model.MobileNo, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.MobileNo)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.HomeContactNo, new { @class = "control-label" })
         @Html.EditorFor(model => model.HomeContactNo, new { @class = "form-control" })
         @Html.ValidationMessageFor(model => model.HomeContactNo)
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.FailAttempt, new { @class = "control-label" })
         @Html.EditorFor(model => model.FailAttempt, new { @class = "form-control" })
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.Label("Status", new { @class = "control-label" })
         <div class="form-control">
            <span>
               @Html.EditorFor(model => model.IsBlocked)
               @Html.LabelFor(model => model.IsBlocked)
            </span><span>
               @Html.EditorFor(model => model.IsDeleted)
               @Html.LabelFor(model => model.IsDeleted)
            </span>
         </div>
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.LastLoginDate, new { @class = "control-label" })
         @Html.EditorFor(model => model.LastLoginDate, new { @class = "form-control" })
      </div>
      <div class="form-group col-lg-3 col-md-6">
         @Html.LabelFor(model => model.LastLogoutDate, new { @class = "control-label" })
         @Html.EditorFor(model => model.LastLogoutDate, new { @class = "form-control" })
      </div>
      <div class="form-group col-md-12">
         @Html.LabelFor(model => model.BlockReason, new { @class = "control-label" })
         @Html.EditorFor(model => model.BlockReason, new { @class = "form-control" })
      </div>
      <div class="form-group col-md-12">
         <button type="submit" class="btn btn-primary mx-3 float-right">
            Save changes</button>
         <button type="reset" class="btn btn-secondary mx-3 float-right">
            Reset</button>
      </div>
   </div>
}